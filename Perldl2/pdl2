#!/usr/bin/env perl

BEGIN {
   $ENV{DEVEL_REPL_PROFILE} = 'PDL::Perldl2::Profile::Perldl2';

   # This should be based on 
   $HOME = $ENV{HOME};             # Useful in shell
   if ($^O =~ /win32/i and
      (! defined($HOME)) or
      (defined($HOME) and $HOME eq "")) {
      $HOME = $ENV{USERPROFILE};
      $HOME =~ s/\\/\//g;
   }

   $ENV{PERLREPL_HISTFILE} = "$HOME/.perldl_hist";
   $ENV{PERLREPL_HISTLEN} = 500;
}

BEGIN {
   my $minversion = "1.003011";
   eval " use Devel::REPL $minversion ";
   if ($@) {
      if ($^O eq 'MSWin32') {
         warn "pdl2: Devel::REPL version $minversion not found, please run perldl instead.\n";
      } else {
         warn "pdl2: Devel::REPL version $minversion not found, running perldl instead...\n";
         exec 'perldl';
      }
      exit 0;
   }
}

use PDL::Perldl2::Script 'run';

__END__

=head1 NAME

  pdl2 - Simple shell (version 2) for PDL

=head1 SYNOPSIS

  Use PDL interactively:

  %> pdl2

  pdl> $a = sequence(10)  # or any other perl or PDL command
  
  pdl> print "\$a = $a\n"; 
  $a = [0 1 2 3 4 5 6 7 8 9]

=head1 DESCRIPTION

The pdl2 program, also known as the Perldl2 shell, is a second
generation version of the original perldl interactive PDL shell.
It attempts to be backward compatible in usage while providing
improved more features, better support for Perl syntax, built
on an easier to extend framework based on L<Devel::REPL>.

If you have L<Devel::REPL> version 1.003011 or later, then pdl2
will start with full functionality.  If L<Devel::REPL> is not
installed or found then C<pdl2> will print a warning and run
the legacy C<perldl> shell command instead.

By default, command lines beginning with the default prompt
of either pdl2 or perldl (one of 'pdl> ', 'PDL> ', or 'perldl> ')
will have the prefix string and surrounding whitespace stripped.
This allows for easy cut-and-paste from example PDL shell
sessions or examples into another shell session.

=head1 SEE ALSO

L<perldl>

=cut
